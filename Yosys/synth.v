/* Generated by Yosys 0.9+3675 (git sha1 71ca9a82, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os) */

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/Comparer.sv:1.1-18.10" *)
module Comparer(i_InputA, i_InputB, o_EQ, o_GT, o_LT);
  (* src = "../HDL/Comparer.sv:13.17-13.40" *)
  wire _0_;
  (* src = "../HDL/Comparer.sv:13.20-13.39" *)
  wire [31:0] _1_;
  (* src = "../HDL/Comparer.sv:5.30-5.38" *)
  input [31:0] i_InputA;
  (* src = "../HDL/Comparer.sv:6.30-6.38" *)
  input [31:0] i_InputB;
  (* src = "../HDL/Comparer.sv:8.30-8.34" *)
  output o_EQ;
  (* src = "../HDL/Comparer.sv:9.30-9.34" *)
  output o_GT;
  (* src = "../HDL/Comparer.sv:10.30-10.34" *)
  output o_LT;
  assign o_GT = i_InputA > (* src = "../HDL/Comparer.sv:14.17-14.36" *) i_InputB;
  assign o_EQ = ! (* src = "../HDL/Comparer.sv:13.17-13.40" *) _0_;
  assign o_LT = i_InputA < (* src = "../HDL/Comparer.sv:15.17-15.36" *) i_InputB;
  assign _0_ = | (* src = "../HDL/Comparer.sv:13.17-13.40" *) _1_;
  assign _1_ = i_InputA ^ (* src = "../HDL/Comparer.sv:13.20-13.39" *) i_InputB;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/ComparerZero.sv:1.1-24.10" *)
module ComparerZero(i_Input, o_EQ, o_GZ, o_LZ, o_GEZ, o_LEZ);
  (* src = "../HDL/ComparerZero.sv:18.37-18.44" *)
  wire _0_;
  (* src = "../HDL/ComparerZero.sv:13.11-13.17" *)
  wire IsZero;
  (* src = "../HDL/ComparerZero.sv:5.30-5.37" *)
  input [31:0] i_Input;
  (* src = "../HDL/ComparerZero.sv:7.30-7.34" *)
  output o_EQ;
  (* src = "../HDL/ComparerZero.sv:10.30-10.35" *)
  output o_GEZ;
  (* src = "../HDL/ComparerZero.sv:8.30-8.34" *)
  output o_GZ;
  (* src = "../HDL/ComparerZero.sv:11.30-11.35" *)
  output o_LEZ;
  (* src = "../HDL/ComparerZero.sv:9.30-9.34" *)
  output o_LZ;
  assign o_GZ = o_GEZ & (* src = "../HDL/ComparerZero.sv:18.17-18.44" *) _0_;
  assign IsZero = ! (* src = "../HDL/ComparerZero.sv:14.21-14.30" *) _0_;
  assign o_GEZ = ~ (* src = "../HDL/ComparerZero.sv:20.17-20.34" *) i_Input[31];
  assign o_LEZ = i_Input[31] | (* src = "../HDL/ComparerZero.sv:21.17-21.42" *) IsZero;
  assign _0_ = | (* src = "../HDL/ComparerZero.sv:14.21-14.30" *) i_Input;
  assign o_EQ = IsZero;
  assign o_LZ = i_Input[31];
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/HalfAdder.sv:1.1-12.10" *)
module HalfAdder(i_OperandA, i_OperandB, o_Result);
  (* src = "../HDL/HalfAdder.sv:5.29-5.39" *)
  input [31:0] i_OperandA;
  (* src = "../HDL/HalfAdder.sv:6.29-6.39" *)
  input [31:0] i_OperandB;
  (* src = "../HDL/HalfAdder.sv:8.30-8.38" *)
  output [31:0] o_Result;
  assign o_Result = i_OperandA + (* src = "../HDL/HalfAdder.sv:10.23-10.46" *) i_OperandB;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/Mux2To1.sv:18.1-31.10" *)
module Mux2To1(i_Select, i_Input0, i_Input1, o_Output);
  (* src = "../HDL/Mux2To1.sv:24.30-24.38" *)
  input [31:0] i_Input0;
  (* src = "../HDL/Mux2To1.sv:25.30-25.38" *)
  input [31:0] i_Input1;
  (* src = "../HDL/Mux2To1.sv:22.30-22.38" *)
  input i_Select;
  (* src = "../HDL/Mux2To1.sv:27.30-27.38" *)
  output [31:0] o_Output;
  assign o_Output = i_Select ? (* src = "../HDL/Mux2To1.sv:29.23-29.53" *) i_Input1 : i_Input0;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/Mux4To1.sv:1.1-22.10" *)
module Mux4To1(i_Select, i_Input0, i_Input1, i_Input2, i_Input3, o_Output);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "../HDL/Mux4To1.sv:7.30-7.38" *)
  input [31:0] i_Input0;
  (* src = "../HDL/Mux4To1.sv:8.30-8.38" *)
  input [31:0] i_Input1;
  (* src = "../HDL/Mux4To1.sv:9.30-9.38" *)
  input [31:0] i_Input2;
  (* src = "../HDL/Mux4To1.sv:10.30-10.38" *)
  input [31:0] i_Input3;
  (* src = "../HDL/Mux4To1.sv:5.30-5.38" *)
  input [1:0] i_Select;
  (* src = "../HDL/Mux4To1.sv:12.30-12.38" *)
  output [31:0] o_Output;
  function [31:0] _4_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "../HDL/Mux4To1.sv:0.0-0.0|../HDL/Mux4To1.sv:15.9-20.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _4_ = b[31:0];
      4'b??1?:
        _4_ = b[63:32];
      4'b?1??:
        _4_ = b[95:64];
      4'b1???:
        _4_ = b[127:96];
      default:
        _4_ = a;
    endcase
  endfunction
  assign o_Output = _4_(32'hxxxxxxxx, { i_Input0, i_Input1, i_Input2, i_Input3 }, { _3_, _2_, _1_, _0_ });
  assign _0_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux4To1.sv:0.0-0.0|../HDL/Mux4To1.sv:15.9-20.16" *) 2'h3;
  assign _1_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux4To1.sv:0.0-0.0|../HDL/Mux4To1.sv:15.9-20.16" *) 2'h2;
  assign _2_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux4To1.sv:0.0-0.0|../HDL/Mux4To1.sv:15.9-20.16" *) 2'h1;
  assign _3_ = ! (* full_case = 32'd1 *) (* src = "../HDL/Mux4To1.sv:0.0-0.0|../HDL/Mux4To1.sv:15.9-20.16" *) i_Select;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/Mux8To1.sv:1.1-30.10" *)
module Mux8To1(i_Select, i_Input0, i_Input1, i_Input2, i_Input3, i_Input4, i_Input5, i_Input6, i_Input7, o_Output);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "../HDL/Mux8To1.sv:7.30-7.38" *)
  input [31:0] i_Input0;
  (* src = "../HDL/Mux8To1.sv:8.30-8.38" *)
  input [31:0] i_Input1;
  (* src = "../HDL/Mux8To1.sv:9.30-9.38" *)
  input [31:0] i_Input2;
  (* src = "../HDL/Mux8To1.sv:10.30-10.38" *)
  input [31:0] i_Input3;
  (* src = "../HDL/Mux8To1.sv:11.30-11.38" *)
  input [31:0] i_Input4;
  (* src = "../HDL/Mux8To1.sv:12.30-12.38" *)
  input [31:0] i_Input5;
  (* src = "../HDL/Mux8To1.sv:13.30-13.38" *)
  input [31:0] i_Input6;
  (* src = "../HDL/Mux8To1.sv:14.30-14.38" *)
  input [31:0] i_Input7;
  (* src = "../HDL/Mux8To1.sv:5.30-5.38" *)
  input [2:0] i_Select;
  (* src = "../HDL/Mux8To1.sv:16.30-16.38" *)
  output [31:0] o_Output;
  function [31:0] _08_;
    input [31:0] a;
    input [255:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _08_ = b[31:0];
      8'b??????1?:
        _08_ = b[63:32];
      8'b?????1??:
        _08_ = b[95:64];
      8'b????1???:
        _08_ = b[127:96];
      8'b???1????:
        _08_ = b[159:128];
      8'b??1?????:
        _08_ = b[191:160];
      8'b?1??????:
        _08_ = b[223:192];
      8'b1???????:
        _08_ = b[255:224];
      default:
        _08_ = a;
    endcase
  endfunction
  assign o_Output = _08_(32'hxxxxxxxx, { i_Input0, i_Input1, i_Input2, i_Input3, i_Input4, i_Input5, i_Input6, i_Input7 }, { _07_, _06_, _05_, _04_, _03_, _02_, _01_, _00_ });
  assign _00_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h7;
  assign _01_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h6;
  assign _02_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h5;
  assign _03_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h4;
  assign _04_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h3;
  assign _05_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h2;
  assign _06_ = i_Select == (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) 3'h1;
  assign _07_ = ! (* full_case = 32'd1 *) (* src = "../HDL/Mux8To1.sv:0.0-0.0|../HDL/Mux8To1.sv:19.9-28.16" *) i_Select;
endmodule

(* is_interface =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/RdBusInterface.sv:0.0-0.0" *)
module RdBusInterface();
endmodule

(* is_interface =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/RdWrBusInterface.sv:0.0-0.0" *)
module RdWrBusInterface();
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/Register.sv:1.1-29.10" *)
module Register(i_Clock, i_Reset, i_WrEnable, i_WrData, o_RdData);
  (* src = "../HDL/Register.sv:19.5-25.16" *)
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  (* src = "../HDL/Register.sv:14.23-14.27" *)
  reg [31:0] Data = 32'd0;
  (* src = "../HDL/Register.sv:6.30-6.37" *)
  input i_Clock;
  (* src = "../HDL/Register.sv:7.30-7.37" *)
  input i_Reset;
  (* src = "../HDL/Register.sv:11.30-11.38" *)
  input [31:0] i_WrData;
  (* src = "../HDL/Register.sv:9.30-9.40" *)
  input i_WrEnable;
  (* src = "../HDL/Register.sv:12.30-12.38" *)
  output [31:0] o_RdData;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/Register.sv:19.5-25.16" *)
  always @(posedge i_Clock)
    if (!_05_) Data <= _00_;
  assign _01_ = | { _03_, _02_ };
  function [31:0] _08_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../HDL/Register.sv:0.0-0.0|../HDL/Register.sv:20.9-25.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _08_ = b[31:0];
      2'b1?:
        _08_ = b[63:32];
      default:
        _08_ = a;
    endcase
  endfunction
  assign _00_ = _08_(32'hxxxxxxxx, { i_WrData, 32'h00000000 }, { _04_, _01_ });
  assign _02_ = { i_Reset, i_WrEnable } == (* full_case = 32'd1 *) (* src = "../HDL/Register.sv:0.0-0.0|../HDL/Register.sv:20.9-25.16" *) 2'h3;
  assign _03_ = { i_Reset, i_WrEnable } == (* full_case = 32'd1 *) (* src = "../HDL/Register.sv:0.0-0.0|../HDL/Register.sv:20.9-25.16" *) 2'h2;
  assign _04_ = { i_Reset, i_WrEnable } == (* full_case = 32'd1 *) (* src = "../HDL/Register.sv:0.0-0.0|../HDL/Register.sv:20.9-25.16" *) 2'h1;
  assign _05_ = ! (* full_case = 32'd1 *) (* src = "../HDL/Register.sv:0.0-0.0|../HDL/Register.sv:20.9-25.16" *) { i_Reset, i_WrEnable };
  assign o_RdData = i_Reset ? (* src = "../HDL/Register.sv:27.23-27.44" *) 32'd0 : Data;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/stageIF.sv:1.1-55.10" *)
module stageIF(i_Clock, i_Reset, i_PgmInst, o_PgmAddr, i_JumpEnable, i_JumpAddr, o_Inst, o_PCPlus4);
  (* src = "../HDL/stageIF.sv:27.33-27.37" *)
  wire [31:0] Inst;
  (* src = "../HDL/stageIF.sv:28.33-28.35" *)
  reg [31:0] PC;
  (* src = "../HDL/stageIF.sv:30.33-30.39" *)
  wire [31:0] PCNext;
  (* src = "../HDL/stageIF.sv:29.33-29.40" *)
  wire [31:0] PCPlus4;
  (* src = "../HDL/stageIF.sv:8.40-8.47" *)
  input i_Clock;
  (* src = "../HDL/stageIF.sv:19.40-19.50" *)
  input [31:0] i_JumpAddr;
  (* src = "../HDL/stageIF.sv:18.40-18.52" *)
  input i_JumpEnable;
  (* src = "../HDL/stageIF.sv:13.40-13.49" *)
  input [31:0] i_PgmInst;
  (* src = "../HDL/stageIF.sv:9.40-9.47" *)
  input i_Reset;
  (* src = "../HDL/stageIF.sv:23.40-23.46" *)
  output [31:0] o_Inst;
  reg [31:0] o_Inst;
  (* src = "../HDL/stageIF.sv:24.40-24.49" *)
  output [31:0] o_PCPlus4;
  reg [31:0] o_PCPlus4;
  (* src = "../HDL/stageIF.sv:14.40-14.49" *)
  output [31:0] o_PgmAddr;
  assign PCPlus4 = PC + (* src = "../HDL/stageIF.sv:35.19-35.25" *) 32'd4;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageIF.sv:50.5-53.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_Inst <= 32'd0;
    else o_Inst <= i_PgmInst;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageIF.sv:50.5-53.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_PCPlus4 <= 32'd0;
    else o_PCPlus4 <= PCPlus4;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageIF.sv:38.5-39.36" *)
  always @(posedge i_Clock)
    if (i_Reset) PC <= 32'd0;
    else PC <= PCNext;
  assign PCNext = i_JumpEnable ? (* src = "../HDL/stageIF.sv:36.19-36.54" *) i_JumpAddr : PCPlus4;
  assign Inst = i_PgmInst;
  assign o_PgmAddr = PC;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/stageMEM.sv:1.1-49.10" *)
module stageMEM(i_Clock, i_Reset, i_mem_rdata, o_mem_wdata, o_mem_addr, o_mem_we, i_AluResult, i_WriteData, i_WriteReg, i_RegWrEnable, i_MemToReg, i_MemWrEnable, o_AluOut, o_ReadData, o_WriteReg, o_RegWrEnable, o_MemToReg);
  (* src = "../HDL/stageMEM.sv:13.40-13.51" *)
  input [31:0] i_AluResult;
  (* src = "../HDL/stageMEM.sv:5.40-5.47" *)
  input i_Clock;
  (* src = "../HDL/stageMEM.sv:17.40-17.50" *)
  input i_MemToReg;
  (* src = "../HDL/stageMEM.sv:18.40-18.53" *)
  input i_MemWrEnable;
  (* src = "../HDL/stageMEM.sv:16.40-16.53" *)
  input i_RegWrEnable;
  (* src = "../HDL/stageMEM.sv:6.40-6.47" *)
  input i_Reset;
  (* src = "../HDL/stageMEM.sv:14.40-14.51" *)
  input [31:0] i_WriteData;
  (* src = "../HDL/stageMEM.sv:15.40-15.50" *)
  input [4:0] i_WriteReg;
  (* src = "../HDL/stageMEM.sv:8.40-8.51" *)
  input [31:0] i_mem_rdata;
  (* src = "../HDL/stageMEM.sv:20.40-20.48" *)
  output [31:0] o_AluOut;
  reg [31:0] o_AluOut;
  (* src = "../HDL/stageMEM.sv:24.40-24.50" *)
  output o_MemToReg;
  reg o_MemToReg;
  (* src = "../HDL/stageMEM.sv:21.40-21.50" *)
  output [31:0] o_ReadData;
  reg [31:0] o_ReadData;
  (* src = "../HDL/stageMEM.sv:23.40-23.53" *)
  output o_RegWrEnable;
  reg o_RegWrEnable;
  (* src = "../HDL/stageMEM.sv:22.40-22.50" *)
  output [4:0] o_WriteReg;
  reg [4:0] o_WriteReg;
  (* src = "../HDL/stageMEM.sv:10.40-10.50" *)
  output [31:0] o_mem_addr;
  (* src = "../HDL/stageMEM.sv:9.40-9.51" *)
  output [31:0] o_mem_wdata;
  (* src = "../HDL/stageMEM.sv:11.40-11.48" *)
  output o_mem_we;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageMEM.sv:32.5-47.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_AluOut <= 32'd0;
    else o_AluOut <= i_AluResult;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageMEM.sv:32.5-47.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_ReadData <= 32'd0;
    else o_ReadData <= i_mem_rdata;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageMEM.sv:32.5-47.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_WriteReg <= 5'h00;
    else o_WriteReg <= i_WriteReg;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageMEM.sv:32.5-47.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_RegWrEnable <= 1'h0;
    else o_RegWrEnable <= i_RegWrEnable;
  (* \always_ff  = 32'd1 *)
  (* src = "../HDL/stageMEM.sv:32.5-47.8" *)
  always @(posedge i_Clock)
    if (i_Reset) o_MemToReg <= 1'h0;
    else o_MemToReg <= i_MemToReg;
  assign o_mem_addr = i_AluResult;
  assign o_mem_wdata = i_WriteData;
  assign o_mem_we = i_MemWrEnable;
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../HDL/stageWB.sv:1.1-24.10" *)
module stageWB(i_Clock, i_Reset, i_AluOut, i_ReadData, i_MemToReg, o_Result);
  (* src = "../HDL/stageWB.sv:10.40-10.48" *)
  input [31:0] i_AluOut;
  (* src = "../HDL/stageWB.sv:6.40-6.47" *)
  input i_Clock;
  (* src = "../HDL/stageWB.sv:12.40-12.50" *)
  input i_MemToReg;
  (* src = "../HDL/stageWB.sv:11.40-11.50" *)
  input [31:0] i_ReadData;
  (* src = "../HDL/stageWB.sv:7.40-7.47" *)
  input i_Reset;
  (* src = "../HDL/stageWB.sv:14.40-14.48" *)
  output [31:0] o_Result;
  (* module_not_derived = 32'd1 *)
  (* src = "../HDL/stageWB.sv:18.5-22.30" *)
  Mux2To1 #(
    .WIDTH(32'sd32)
  ) mux (
    .i_Input0(i_AluOut),
    .i_Input1(i_ReadData),
    .i_Select(i_MemToReg),
    .o_Output(o_Result)
  );
endmodule

(* dynports =  1  *)
(* cells_not_processed =  1  *)
(* src = "../Verilator/verilator_top.sv:17.1-67.10" *)
module top(i_Clock, i_Reset, i_ram_rdata, o_ram_wdata, o_ram_addr, o_ram_we, i_rom_rdata, o_rom_addr);
  (* src = "../Verilator/verilator_top.sv:45.28-45.39" *)
  wire \MemBus.Addr ;
  (* src = "../Verilator/verilator_top.sv:44.12-44.25" *)
  (* unused_bits = "0" *)
  wire \MemBus.RdData ;
  (* src = "../Verilator/verilator_top.sv:46.28-46.41" *)
  wire \MemBus.WrData ;
  (* src = "../Verilator/verilator_top.sv:47.28-47.43" *)
  wire \MemBus.WrEnable ;
  (* src = "../Verilator/verilator_top.sv:50.28-50.39" *)
  wire \PgmBus.Addr ;
  (* src = "../Verilator/verilator_top.sv:49.12-49.25" *)
  (* unused_bits = "0" *)
  wire \PgmBus.RdData ;
  (* src = "../Verilator/verilator_top.sv:23.34-23.41" *)
  input i_Clock;
  (* src = "../Verilator/verilator_top.sv:24.34-24.41" *)
  input i_Reset;
  (* src = "../Verilator/verilator_top.sv:26.34-26.45" *)
  input [31:0] i_ram_rdata;
  (* src = "../Verilator/verilator_top.sv:31.34-31.45" *)
  input [31:0] i_rom_rdata;
  (* src = "../Verilator/verilator_top.sv:28.34-28.44" *)
  output [31:0] o_ram_addr;
  (* src = "../Verilator/verilator_top.sv:27.34-27.45" *)
  output [31:0] o_ram_wdata;
  (* src = "../Verilator/verilator_top.sv:29.34-29.42" *)
  output o_ram_we;
  (* src = "../Verilator/verilator_top.sv:32.34-32.44" *)
  output [31:0] o_rom_addr;
  assign \MemBus.Addr  = o_ram_addr[0];
  assign \MemBus.RdData  = i_ram_rdata[0];
  assign \MemBus.WrData  = o_ram_wdata[0];
  assign \MemBus.WrEnable  = o_ram_we;
  assign \PgmBus.Addr  = o_rom_addr[0];
  assign \PgmBus.RdData  = i_rom_rdata[0];
  assign o_ram_addr[31:1] = 31'h00000000;
  assign o_ram_wdata[31:1] = 31'h00000000;
  assign o_rom_addr[31:1] = 31'h00000000;
endmodule
